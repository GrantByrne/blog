<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grant's Blog</title><link>/</link><description>Recent content on Grant's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Grant Byrne 2021</copyright><lastBuildDate>Fri, 24 Aug 2018 15:52:48 -0400</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Activator.CreateInstance Alternatives with Benchmarks</title><link>/posts/activatorcreateinstancealternativetesting/</link><pubDate>Fri, 24 Aug 2018 15:52:48 -0400</pubDate><guid>/posts/activatorcreateinstancealternativetesting/</guid><description>
.NET provides multiple ways of generating objects at runtime. Each of these options offer their own trades offs in terms of performance. I will demonstrate that not only are there great performance gains to be had over Activator.CreateInstance(&amp;hellip;), but I will also show that there are nuances to how you set up these classes that can dramatically effect performance.
Why is this important? While there may be more applications, two examples that I can think of that rely on generating objects at runtime are game development frameworks and IOC (inversion of control) containers.</description></item><item><title>Setting up Autofac with Caliburn Micro v3.2.0 and Autofac v4.8.1</title><link>/posts/settingupautofacwithcaliburnmicro/</link><pubDate>Wed, 15 Aug 2018 22:40:27 -0400</pubDate><guid>/posts/settingupautofacwithcaliburnmicro/</guid><description>
I find myself frequently setting up new projects with Caliburn Micro; however, It isnâ€™t always easy to remember the code to integrate Autofac with the bootstrapper. So, here is the template that I use when creating a new application.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 public class ClientBootstrapper : BootstrapperBase { private static IContainer Container; public ClientBootstrapper() { this.</description></item><item><title>First Post</title><link>/posts/first/</link><pubDate>Wed, 15 Aug 2018 22:16:38 -0400</pubDate><guid>/posts/first/</guid><description>
Hello World!
After multiple attempts in the past I&amp;rsquo;m looking to start blogging again.
In this iteration, I&amp;rsquo;m using an Amazon S3 bucket serving up a static site that is generated with Hugo. So far I&amp;rsquo;m pretty happy with the results.
In future iterations of the site, I&amp;rsquo;m planning to:
Add tagging support to the posts Add the google analytics tag Make some adjustments to the theme to make it even more lightweight Add a landing page so this website is more than just a blog Add references to the other sites where I spend my time: Github and Instagram.</description></item></channel></rss>