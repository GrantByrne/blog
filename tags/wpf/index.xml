<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wpf on Grant's Blog</title><link>/tags/wpf/</link><description>Recent content in wpf on Grant's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Grant Byrne 2021</copyright><lastBuildDate>Tue, 04 May 2021 22:05:27 -0400</lastBuildDate><atom:link href="/tags/wpf/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting Window Size With Caliburn Micro</title><link>/posts/setting-window-size-with-caliburn-micro/</link><pubDate>Tue, 04 May 2021 22:05:27 -0400</pubDate><guid>/posts/setting-window-size-with-caliburn-micro/</guid><description>
This is something that has actually bugged me for a while. Once I figured it out, it annoyed me that I didn&amp;rsquo;t figure it out sooner.
When displaying a window in caliburn, you can set attributes about the Window object when calling it.
So, lets say you want to set the height and width on the window to 600 x 300:
First, you would start with something like this:
public class ShellViewModel : PropertyChangedBase, IShell { private readonly IWindowManager windowManager; public ShellViewModel() { this.</description></item><item><title>Wiring Up Fluent Validation With WPF</title><link>/posts/wiring-up-fluent-validation-with-wpf/</link><pubDate>Mon, 03 May 2021 22:30:07 -0400</pubDate><guid>/posts/wiring-up-fluent-validation-with-wpf/</guid><description>
Update
I originally wrote this proof of concept about 7 years ago early in my time with WPF. I published it on an earlier iteration of my blog via Github Gist and Wordpress (You can find the gist here). After which point I pretty much forgot out it.
I recently came across the Gist and found that it has helped out a surprising number of people. So, it makes sense to me to pull this in to a blog and annotate it a bit better.</description></item><item><title>Setting up Autofac with Caliburn Micro v3.2.0 and Autofac v4.8.1</title><link>/posts/settingupautofacwithcaliburnmicro/</link><pubDate>Wed, 15 Aug 2018 22:40:27 -0400</pubDate><guid>/posts/settingupautofacwithcaliburnmicro/</guid><description>
I find myself frequently setting up new projects with Caliburn Micro; however, It isnâ€™t always easy to remember the code to integrate Autofac with the bootstrapper. So, here is the template that I use when creating a new application.
public class ClientBootstrapper : BootstrapperBase { private static IContainer Container; public ClientBootstrapper() { this.Initialize(); } protected override void Configure() { var builder = new ContainerBuilder(); builder.RegisterType&amp;lt;WindowManager&amp;gt;() .AsImplementedInterfaces() .SingleInstance(); builder.RegisterType&amp;lt;EventAggregator&amp;gt;() .AsImplementedInterfaces() .SingleInstance(); Container = builder.</description></item></channel></rss>